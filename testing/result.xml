<?xml version="1.0" encoding="utf-8"?>
<testsuites>
    <testsuite name="pytest" errors="1" failures="1" skipped="0" tests="20" time="0.308"
               timestamp="2020-10-24T21:32:12.780685" hostname="DESKTOP-7G16EDQ">
        <testcase classname="test_calc.TestCalc" name="test_add[int_case]" time="0.002"/>
        <testcase classname="test_calc.TestCalc" name="test_add[bignum_case]" time="0.001"/>
        <testcase classname="test_calc.TestCalc" name="test_add[float_case]" time="0.001"/>
        <testcase classname="test_calc.TestCalc" name="test_add1" time="0.001"/>
        <testcase classname="test_calc.TestCalc" name="test_div[1-0]" time="0.001"/>
        <testcase classname="test_calc.TestCalc" name="test_div[10-0]" time="0.001"/>
        <testcase classname="test_demo" name="test_answer" time="0.001">
            <failure message="assert 4 == 5&#10; +  where 4 = inc(3)">def test_answer():
                &gt; assert inc(3) == 5
                E assert 4 == 5
                E + where 4 = inc(3)

                test_demo.py:6: AssertionError
            </failure>
        </testcase>
        <testcase classname="test_mark" name="test_login1" time="0.001"/>
        <testcase classname="test_mark" name="test_login2" time="0.001"/>
        <testcase classname="test_mark" name="test_login3" time="0.001"/>
        <testcase classname="test_mark" name="test_search1" time="0.001"/>
        <testcase classname="test_mark" name="test_search2" time="0.001"/>
        <testcase classname="test_mark" name="test_search3" time="0.001"/>
        <testcase classname="test_qiyeweix.TestTestdemo" name="test_cookie" time="0.002">
            <error message="failed on setup with &quot;selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home&quot;">
                self = &lt;selenium.webdriver.chrome.service.Service object at 0x04B7A118&gt;

                def start(self):
                """
                Starts the Service.

                :Exceptions:
                - WebDriverException : Raised either when it can't start the service
                or when it can't connect to the service
                """
                try:
                cmd = [self.path]
                cmd.extend(self.command_line_args())
                &gt; self.process = subprocess.Popen(cmd, env=self.env,
                close_fds=platform.system() != 'Windows',
                stdout=self.log_file,
                stderr=self.log_file,
                stdin=PIPE)

                e:\python38-32\lib\site-packages\selenium\webdriver\common\service.py:72:
                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

                self = &lt;subprocess.Popen object at 0x04B7A178&gt;, args = ['chromedriver', '--port=59121'], bufsize =
                -1, executable = None, stdin = -1, stdout = -3
                stderr = -3, preexec_fn = None, close_fds = False, shell = False, cwd = None
                env = environ({'EXEPATH': 'E:\\Git', 'GNU_HOME': 'C:\\Program Files (x86)\\GnuWin32',
                'COMMONPROGRAMFILES': 'C:\\Program Fil...432': 'C:\\Program Files\\Common Files', 'PYTEST_CURRENT_TEST':
                'test_qiyeweix.py::TestTestdemo::test_cookie (setup)'})
                universal_newlines = None, startupinfo = None, creationflags = 0, restore_signals = True,
                start_new_session = False, pass_fds = ()

                def __init__(self, args, bufsize=-1, executable=None,
                stdin=None, stdout=None, stderr=None,
                preexec_fn=None, close_fds=True,
                shell=False, cwd=None, env=None, universal_newlines=None,
                startupinfo=None, creationflags=0,
                restore_signals=True, start_new_session=False,
                pass_fds=(), *, encoding=None, errors=None, text=None):
                """Create new Popen instance."""
                _cleanup()
                # Held while anything is calling waitpid before returncode has been
                # updated to prevent clobbering returncode if wait() or poll() are
                # called from multiple threads at once. After acquiring the lock,
                # code must re-check self.returncode to see if another thread just
                # finished a waitpid() call.
                self._waitpid_lock = threading.Lock()

                self._input = None
                self._communication_started = False
                if bufsize is None:
                bufsize = -1 # Restore default
                if not isinstance(bufsize, int):
                raise TypeError("bufsize must be an integer")

                if _mswindows:
                if preexec_fn is not None:
                raise ValueError("preexec_fn is not supported on Windows "
                "platforms")
                else:
                # POSIX
                if pass_fds and not close_fds:
                warnings.warn("pass_fds overriding close_fds.", RuntimeWarning)
                close_fds = True
                if startupinfo is not None:
                raise ValueError("startupinfo is only supported on Windows "
                "platforms")
                if creationflags != 0:
                raise ValueError("creationflags is only supported on Windows "
                "platforms")

                self.args = args
                self.stdin = None
                self.stdout = None
                self.stderr = None
                self.pid = None
                self.returncode = None
                self.encoding = encoding
                self.errors = errors

                # Validate the combinations of text and universal_newlines
                if (text is not None and universal_newlines is not None
                and bool(universal_newlines) != bool(text)):
                raise SubprocessError('Cannot disambiguate when both text '
                'and universal_newlines are supplied but '
                'different. Pass one or the other.')

                # Input and output objects. The general principle is like
                # this:
                #
                # Parent Child
                # ------ -----
                # p2cwrite ---stdin---&gt; p2cread
                # c2pread &lt;--stdout--- c2pwrite
                # errread &lt;--stderr--- errwrite
                #
                # On POSIX, the child objects are file descriptors. On
                # Windows, these are Windows file handles. The parent objects
                # are file descriptors on both platforms. The parent objects
                # are -1 when not using PIPEs. The child objects are -1
                # when not redirecting.

                (p2cread, p2cwrite,
                c2pread, c2pwrite,
                errread, errwrite) = self._get_handles(stdin, stdout, stderr)

                # We wrap OS handles *before* launching the child, otherwise a
                # quickly terminating child could make our fds unwrappable
                # (see #8458).

                if _mswindows:
                if p2cwrite != -1:
                p2cwrite = msvcrt.open_osfhandle(p2cwrite.Detach(), 0)
                if c2pread != -1:
                c2pread = msvcrt.open_osfhandle(c2pread.Detach(), 0)
                if errread != -1:
                errread = msvcrt.open_osfhandle(errread.Detach(), 0)

                self.text_mode = encoding or errors or text or universal_newlines

                # How long to resume waiting on a child after the first ^C.
                # There is no right value for this. The purpose is to be polite
                # yet remain good for interactive users trying to exit a tool.
                self._sigint_wait_secs = 0.25 # 1/xkcd221.getRandomNumber()

                self._closed_child_pipe_fds = False

                if self.text_mode:
                if bufsize == 1:
                line_buffering = True
                # Use the default buffer size for the underlying binary streams
                # since they don't support line buffering.
                bufsize = -1
                else:
                line_buffering = False

                try:
                if p2cwrite != -1:
                self.stdin = io.open(p2cwrite, 'wb', bufsize)
                if self.text_mode:
                self.stdin = io.TextIOWrapper(self.stdin, write_through=True,
                line_buffering=line_buffering,
                encoding=encoding, errors=errors)
                if c2pread != -1:
                self.stdout = io.open(c2pread, 'rb', bufsize)
                if self.text_mode:
                self.stdout = io.TextIOWrapper(self.stdout,
                encoding=encoding, errors=errors)
                if errread != -1:
                self.stderr = io.open(errread, 'rb', bufsize)
                if self.text_mode:
                self.stderr = io.TextIOWrapper(self.stderr,
                encoding=encoding, errors=errors)

                &gt; self._execute_child(args, executable, preexec_fn, close_fds,
                pass_fds, cwd, env,
                startupinfo, creationflags, shell,
                p2cread, p2cwrite,
                c2pread, c2pwrite,
                errread, errwrite,
                restore_signals, start_new_session)

                e:\python38-32\lib\subprocess.py:854:
                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

                self = &lt;subprocess.Popen object at 0x04B7A178&gt;, args = 'chromedriver --port=59121', executable =
                None, preexec_fn = None, close_fds = False
                pass_fds = (), cwd = None
                env = environ({'EXEPATH': 'E:\\Git', 'GNU_HOME': 'C:\\Program Files (x86)\\GnuWin32',
                'COMMONPROGRAMFILES': 'C:\\Program Fil...432': 'C:\\Program Files\\Common Files', 'PYTEST_CURRENT_TEST':
                'test_qiyeweix.py::TestTestdemo::test_cookie (setup)'})
                startupinfo = &lt;subprocess.STARTUPINFO object at 0x04B7A1C0&gt;, creationflags = 0, shell = False,
                p2cread = Handle(1012), p2cwrite = 15, c2pread = -1
                c2pwrite = Handle(1008), errread = -1, errwrite = Handle(1004), unused_restore_signals = True,
                unused_start_new_session = False

                def _execute_child(self, args, executable, preexec_fn, close_fds,
                pass_fds, cwd, env,
                startupinfo, creationflags, shell,
                p2cread, p2cwrite,
                c2pread, c2pwrite,
                errread, errwrite,
                unused_restore_signals, unused_start_new_session):
                """Execute program (MS Windows version)"""

                assert not pass_fds, "pass_fds not supported on Windows."

                if isinstance(args, str):
                pass
                elif isinstance(args, bytes):
                if shell:
                raise TypeError('bytes args is not allowed on Windows')
                args = list2cmdline([args])
                elif isinstance(args, os.PathLike):
                if shell:
                raise TypeError('path-like args is not allowed when '
                'shell is true')
                args = list2cmdline([args])
                else:
                args = list2cmdline(args)

                if executable is not None:
                executable = os.fsdecode(executable)

                # Process startup details
                if startupinfo is None:
                startupinfo = STARTUPINFO()
                else:
                # bpo-34044: Copy STARTUPINFO since it is modified above,
                # so the caller can reuse it multiple times.
                startupinfo = startupinfo.copy()

                use_std_handles = -1 not in (p2cread, c2pwrite, errwrite)
                if use_std_handles:
                startupinfo.dwFlags |= _winapi.STARTF_USESTDHANDLES
                startupinfo.hStdInput = p2cread
                startupinfo.hStdOutput = c2pwrite
                startupinfo.hStdError = errwrite

                attribute_list = startupinfo.lpAttributeList
                have_handle_list = bool(attribute_list and
                "handle_list" in attribute_list and
                attribute_list["handle_list"])

                # If we were given an handle_list or need to create one
                if have_handle_list or (use_std_handles and close_fds):
                if attribute_list is None:
                attribute_list = startupinfo.lpAttributeList = {}
                handle_list = attribute_list["handle_list"] = \
                list(attribute_list.get("handle_list", []))

                if use_std_handles:
                handle_list += [int(p2cread), int(c2pwrite), int(errwrite)]

                handle_list[:] = self._filter_handle_list(handle_list)

                if handle_list:
                if not close_fds:
                warnings.warn("startupinfo.lpAttributeList['handle_list'] "
                "overriding close_fds", RuntimeWarning)

                # When using the handle_list we always request to inherit
                # handles but the only handles that will be inherited are
                # the ones in the handle_list
                close_fds = False

                if shell:
                startupinfo.dwFlags |= _winapi.STARTF_USESHOWWINDOW
                startupinfo.wShowWindow = _winapi.SW_HIDE
                comspec = os.environ.get("COMSPEC", "cmd.exe")
                args = '{} /c "{}"'.format (comspec, args)

                if cwd is not None:
                cwd = os.fsdecode(cwd)

                sys.audit("subprocess.Popen", executable, args, cwd, env)

                # Start the process
                try:
                &gt; hp, ht, pid, tid = _winapi.CreateProcess(executable, args,
                # no special security
                None, None,
                int(not close_fds),
                creationflags,
                env,
                cwd,
                startupinfo)
                E FileNotFoundError: [WinError 2] 系统找不到指定的文件。

                e:\python38-32\lib\subprocess.py:1307: FileNotFoundError

                During handling of the above exception, another exception occurred:

                self = &lt;testing.test_qiyeweix.TestTestdemo object at 0x04B20928&gt;
                method = &lt;bound method TestTestdemo.test_cookie of &lt;testing.test_qiyeweix.TestTestdemo object at
                0x04B20928&gt;&gt;

                def setup_method(self, method):
                options = Options()
                options.debugger_address = "127.0.0.1:9222"
                &gt; self.driver = webdriver.Chrome(options=options)

                test_qiyeweix.py:17:
                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                e:\python38-32\lib\site-packages\selenium\webdriver\chrome\webdriver.py:73: in __init__
                self.service.start()
                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

                self = &lt;selenium.webdriver.chrome.service.Service object at 0x04B7A118&gt;

                def start(self):
                """
                Starts the Service.

                :Exceptions:
                - WebDriverException : Raised either when it can't start the service
                or when it can't connect to the service
                """
                try:
                cmd = [self.path]
                cmd.extend(self.command_line_args())
                self.process = subprocess.Popen(cmd, env=self.env,
                close_fds=platform.system() != 'Windows',
                stdout=self.log_file,
                stderr=self.log_file,
                stdin=PIPE)
                except TypeError:
                raise
                except OSError as err:
                if err.errno == errno.ENOENT:
                &gt; raise WebDriverException(
                "'%s' executable needs to be in PATH. %s" % (
                os.path.basename(self.path), self.start_error_message)
                E selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH.
                Please see https://sites.google.com/a/chromium.org/chromedriver/home

                e:\python38-32\lib\site-packages\selenium\webdriver\common\service.py:81: WebDriverException
            </error>
        </testcase>
        <testcase classname="test_setup" name="test_case1" time="0.001"/>
        <testcase classname="test_setup.TestDemo" name="test_demo1" time="0.001"/>
        <testcase classname="test_setup.TestDemo" name="test_demo2" time="0.001"/>
        <testcase classname="test_yaml.Testdata" name="test_data[10-20]" time="0.001"/>
        <testcase classname="test_yaml.Testdata" name="test_data[30-40]" time="0.001"/>
        <testcase classname="test_yaml.Testdata" name="test_data[50-60]" time="0.001"/>
    </testsuite>
</testsuites>